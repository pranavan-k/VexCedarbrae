{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nmotor_1 = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nmotor_2 = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nmotor_3 = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nmotor_4 = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nmotor_5 = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\nmotor_6 = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)\ninertial_16 = Inertial(Ports.PORT16)\nx_encoder = Rotation(Ports.PORT7, True)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nfrom math import pi, sqrt, atan2, sin, cos\n\nWHEEL_RADIUS = 1.5 # inches\nWHEEL_CIRC = 2*pi*WHEEL_RADIUS\n\nleft_motor_group = MotorGroup(motor_1, motor_2, motor_3)\nright_motor_group = MotorGroup(motor_4, motor_5, motor_6)\ndrivetrain = SmartDrive(left_motor_group, right_motor_group, inertial_16)\n\ndef driver_controlled():\n    left_motor_group.set_velocity(0, PERCENT)\n    right_motor_group.set_velocity(0, PERCENT)\n    left_motor_group.spin(FORWARD)\n    right_motor_group.spin(FORWARD)\n\n    while True:\n        ax_move = controller_1.axis3.position()\n        ax_turn = controller_1.axis1.position()\n\n        left_motor_group.set_velocity(ax_move + ax_turn, PERCENT)\n        right_motor_group.set_velocity(ax_move - ax_turn, PERCENT)\n\ndef auton_init():\n    left_motor_group.set_velocity(100, PERCENT)\n    right_motor_group.set_velocity(100, PERCENT)\n    x_encoder.set_position(0, TURNS)\n    drivetrain.set_rotation(90, DEGREES)\n    drivetrain.set_drive_velocity(0, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    drivetrain.drive(FORWARD)\n\ndef update_pose(distance_traveled, cur_x, cur_y):\n    new_x = cur_x + distance_traveled * cos(theta)\n    new_y = cur_y + distance_traveled * sin(theta)\n    new_a = inertial_16.rotation(DEGREES)\n\n    return [new_x, new_y, new_a]\n\ndef move(cur, tar):\n    cur_x, cur_y, cur_a = cur\n    tar_x, tar_y = tar\n\n    dx = tar_x - cur_x\n    dy = tar_y - cur_y\n\n    error = sqrt(dx**2 + dy**2)\n    theta = atan2(tar_x - cur_x, tar_y - cur_y) * 180/pi # degrees\n    print(\"distance: \" + str(error) + \" angle: \" + str(angle))\n\n    # may not be necessary, if error is 0 velocity should automatically be 0\n    # if error == 0:\n    #     drivetrain.set_drive_velocity(0)\n    #     return\n    \n    drivetrain.turn_to_rotation(theta, DEGREES, wait=True)\n    drivetrain.set_drive_velocity(error * 10, PERCENT)\n\n    distance_traveled = x_encoder.position(TURNS) * WHEEL_CIRC\n    return update_pose(distance_traveled, cur_x, cur_y) # the new global pose\n\nauton_init()\ncur = [0, 0, 0]\n\nwhile True:\n    cur = move(cur, [24, 24]) # global coords x, y\n    print(cur)","textLanguage":"python","robotConfig":[{"port":[1],"name":"motor_1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"motor_2","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"motor_3","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[4],"name":"motor_4","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[5],"name":"motor_5","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6],"name":"motor_6","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[16],"name":"inertial_16","customName":false,"deviceType":"Inertial","deviceClass":"inertial","setting":{},"triportSourcePort":22},{"port":[7],"name":"x_encoder","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"true"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.5","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}